'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var searchCom = function (_wepy$page) {
	_inherits(searchCom, _wepy$page);

	function searchCom() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, searchCom);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = searchCom.__proto__ || Object.getPrototypeOf(searchCom)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
			'navigationBarTitleText': '俺搜·找客户-搜索',
			'navigationBarTextStyle': '#FFFFFF',
			'navigationBarBackgroundColor': '#0092FF'
		}, _this.components = {}, _this.data = {
			searchHistory: false,
			show_hide: false,
			scrolltop: 0,
			searchList: [],
			loadNum: 0,
			wait: true,
			loadmore: true,
			scrollWrapHeight: 0,
			loginUId: -1,
			searchvalue: "",
			long: -1,
			lat: -1,
			pageIndex: 1, //分页
			historyList: [] //历史搜索记录
		}, _this.methods = {
			insertkey: function insertkey(e) {
				this.searchvalue = e.detail.value;
				if (e.detail.value == "") {
					this.show_hide = false;
				} else {
					this.show_hide = true;
				}
			},
			gotoquery: function gotoquery(e) {
				this.searchvalue = e.detail.value;
				this.fetchSearchCompanyData();
				this.searchvalue = this.searchvalue == undefined ? '' : this.searchvalue;
				var arr = this.historyList;
				var newArr = [this.searchvalue].concat(arr);
				this.historyList = this.unique1(newArr);
				if (this.historyList.length > 10) {
					this.historyList.splice(10, 1);
					wx.setStorageSync('historyListPer', this.historyList);
				}
				wx.setStorageSync('historyListPer', this.historyList);
			},
			bindhistory: function bindhistory(index) {
				var history = wx.getStorageSync('historyListPer');
				this.searchvalue = history[index];
				this.fetchSearchCompanyData();
				console.log(this.searchvalue);
			},
			scrollLoading: function scrollLoading() {
				//滚动加载
				if (this.loadmore) {
					this.pageIndex++;
					if (this.pageIndex < 6) {
						this.fetchSearchCompanyData();
					} else {
						this.loadmore = false;
						wx.showModal({
							title: '',
							content: '更多内容请前往按搜app',
							showCancel: true,
							confirmText: '确定',
							confirmColor: '#0092ff',
							success: function success(res) {
								if (res.confirm) {
									if (wx.getSystemInfoSync().system.toLowerCase().indexOf('andr') != -1) {
										console.log('android');
										wx.navigateTo({
											url: 'downLoad'
										});
									} else {
										console.log('iso');
										wx.navigateTo({
											url: 'downLoad'
										});
									}
								} else if (res.cancel) {
									console.log('用户点击取消');
								}
							}
						});
					}
				} else {
					return false;
				}
			},
			cancelSearch: function cancelSearch() {
				this.searchvalue = "";
				this.show_hide = false;
			},
			subAdvice: function subAdvice() {
				wx.navigateTo({
					url: 'feedback'
				});
			},
			clearHistoryList: function clearHistoryList() {
				this.historyList = []; // 清空列表
				wx.removeStorageSync('historyListPer'); // 清除缓存
			},
			toPersonDetail: function toPersonDetail(e) {
				if (!this.loginUId) {
					wx.navigateTo({
						url: 'login?fromPage=personDetail'
					});
					return;
				}
				var memberId = e.currentTarget.dataset.id;
				wx.navigateTo({
					url: 'connectionDetail?memberId=' + memberId + '&userId=' + this.loginUId
				});
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(searchCom, [{
		key: 'onShow',
		value: function onShow() {
			this.pageIndex = 1;
		}
	}, {
		key: 'onLoad',
		value: function onLoad(e) {
			var antUserInfo = wx.getStorageSync('antUserInfo');
			this.loginUId = antUserInfo.userId;
			this.long = e.long;
			this.lat = e.lat;
			this.scrollWrapHeight = wx.getSystemInfoSync().windowHeight * 0.91;
			this.searchList = []; //每次進入時置空列表
			this.searchvalue = '';
			this.historyList = wx.getStorageSync('historyListPer') == '' ? [] : wx.getStorageSync('historyListPer');
		}
	}, {
		key: 'fetchSearchCompanyData',
		value: function fetchSearchCompanyData() {
			//获取人脉统计
			wx.showLoading({
				title: '加载中'
			});
			var that = this;
			var pageSize = 20;
			_wepy2.default.request({
				url: _config.api.index.searchPerson.url,
				method: _config.api.index.searchPerson.method,
				data: {
					keyword: that.searchvalue,
					userId: that.loginUId,
					pIndex: that.pageIndex
				},
				success: function success(res) {
					console.log(res);
					var searchListData = res.data.body;
					if (searchListData != null) {
						//const tPages=res.data.page.tCount;
						var pages = searchListData.length / 20;
						//var isInt=tPages/(that.pageIndex*20);
						that.loadmore = pages == 1 ? true : false;
						if (that.pageIndex > 1) {
							that.searchList = that.searchList.concat(searchListData);
						} else {
							that.searchList = searchListData;
						}
						if (that.searchList.length <= 0) {
							that.searchHistory = true;
						}
					}
					that.$apply();
					wx.hideLoading();
				}
			});
		}
	}, {
		key: 'unique1',
		value: function unique1(array) {
			// 数组去重
			var n = []; //一个新的临时数组
			//遍历当前数组
			for (var i = 0; i < array.length; i++) {
				//如果当前数组的第i已经保存进了临时数组，那么跳过，
				//否则把当前项push到临时数组里面
				if (n.indexOf(array[i]) == -1) {
					n.push(array[i]);
				}
			}
			return n;
		}
	}]);

	return searchCom;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(searchCom , 'pages/searchPer'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,