'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var switchSubPrice = function (_wepy$component) {
    _inherits(switchSubPrice, _wepy$component);

    function switchSubPrice() {
        var _ref, _this$data;

        var _temp, _this, _ret;

        _classCallCheck(this, switchSubPrice);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = switchSubPrice.__proto__ || Object.getPrototypeOf(switchSubPrice)).call.apply(_ref, [this].concat(args))), _this), _this.data = (_this$data = {
            opa: false,
            tip: "",
            edit: -1,
            isUpload: -1,
            tName: "",
            up: -1,
            dailId: -1,
            loginUId: -1,
            upLoadPic: ['../resources/img/imgUpload.jpg', '../resources/img/imgUpload.jpg', '../resources/img/imgUpload.jpg'],
            upPics: "../resources/img/imgUpload.jpg",
            sorts: [{ name: '原料', value: '原料' }, { name: '改性料', value: '改性料', checked: 'true' }, { name: '辅料', value: '辅料' }, { name: '回料', value: '回料' }],
            filterObj: [],
            unit: [],
            deliveryWays: [],
            hasTax: ['否', '是'],
            deliveryWay: '自提',
            radioIndex: 0,
            taxRadioIndex: 0,
            showOption: false,
            showDeliverOption: false,
            isConfirmSuccess: false,
            showModelItem: false,
            showSeachList: false,
            filteredName: [],
            mType: "原料",
            mName: "",
            csName: "",
            mProducer: "",
            mBrandNum: "",
            mPrice: "",
            mUnit: "元/吨"
        }, _defineProperty(_this$data, 'deliveryWay', '自提'), _defineProperty(_this$data, 'seleCity', ""), _defineProperty(_this$data, 'mModel', ""), _defineProperty(_this$data, 'pVal', ""), _defineProperty(_this$data, 'autoFocus', false), _defineProperty(_this$data, 'uploaded', false), _defineProperty(_this$data, 'emmitImg', 1), _this$data), _this.events = {
            'hideFilterList': function hideFilterList(params) {
                _this.showSeachList = params;
            },
            'giveImg': function giveImg(params) {
                _this.isUpload = parseInt(params);
            },
            'getUnits': function getUnits(params) {
                console.log(params);
                _this.deliveryWays = params.deliveryWay;
                _this.unit = params.units;
            },
            'getFocus': function getFocus(params) {
                var that = _this;
                setTimeout(function () {
                    that.autoFocus = params;
                    that.$apply();
                }, 500);
            },
            'selectCity': function selectCity($event) {
                _this.seleCity = $event;
            },
            'descript': function descript($event) {
                _this.pVal = $event;
            },
            'getUserId': function getUserId($event) {
                _this.loginUId = $event;
            },
            'hasConfirmed': function hasConfirmed(params) {
                if (params == 'passed') {
                    _this.isConfirmSuccess = true;
                } else {
                    _this.isConfirmSuccess = false;
                }
            },
            'copyData': function copyData(params) {
                _this.edit = params.edit;
                _this.up = params.up;
                _this.mName = params.mName;
                _this.mProducer = params.mProducer;
                _this.mBrandNum = params.mBrandNum == undefined ? "" : params.mBrandNum;
                _this.mPrice = parseInt(params.mPrice);
                _this.mUnit = params.mUnit;
                _this.deliveryWay = params.deliveryWay == undefined ? "自提" : params.deliveryWay;
                _this.seleCity = params.seleCity;
                _this.mModel = params.mModel == undefined ? '' : params.mModel;
                _this.pVal = params.pVal;
                _this.radioIndex = isNaN(params.radioIndex) ? 0 : parseInt(params.radioIndex);
                _this.taxRadioIndex = isNaN(params.taxRadioIndex) ? 0 : parseInt(params.taxRadioIndex);
                _this.upPics = params.upPics;
                _this.dailId = params.dailId;
                _this.tName = params.tName;
                _this.uploaded = params.showD == 'true' ? true : false;
                _this.mType = params.getType == undefined ? '原料' : params.getType;
                if (_this.radioIndex == 2) _this.showModelItem = true;
            }
        }, _this.methods = {
            radioTab: function radioTab(e) {
                this.radioIndex = e.currentTarget.dataset.index;
                this.mType = e.currentTarget.dataset.v;
                if (this.mType == '辅料') {
                    this.showModelItem = true;
                } else {
                    this.showModelItem = false;
                }
                this.getPnameDatas();
            },
            filterMname: function filterMname(e) {
                this.showSeachList = true;
                if (this.filterObj != null) {
                    var filterKey = e.detail.value.toUpperCase();
                    var arr = [];
                    for (var i = 0; i < this.filterObj.length; i++) {
                        if (this.filterObj[i].commodityName.toUpperCase().indexOf(filterKey) != -1) {
                            arr.push({ name: this.filterObj[i].commodityName, sName: this.filterObj[i].csname });
                        }
                    }
                    this.filteredName = arr;
                }
            },
            selectPname: function selectPname(e) {
                this.csName = e.currentTarget.dataset.c;
                this.mName = e.currentTarget.dataset.v;
                this.showSeachList = false;
            },
            hasTaxTab: function hasTaxTab(e) {
                this.taxRadioIndex = e.currentTarget.dataset.index;
            },
            showSel: function showSel() {
                this.showOption = !this.showOption;
            },
            selUint: function selUint(e) {
                this.mUnit = e.currentTarget.dataset.v;
                this.showOption = false;
            },
            showDeliveryWays: function showDeliveryWays() {
                this.showDeliverOption = !this.showDeliverOption;
            },
            selDeliveryWays: function selDeliveryWays(e) {
                this.deliveryWay = e.currentTarget.dataset.v;
                this.showDeliverOption = false;
            },
            showAdd: function showAdd() {
                wx.navigateTo({
                    url: 'cityposition'
                });
            },
            toDescription: function toDescription(e) {
                var takeVal = e.currentTarget.dataset.v;
                wx.navigateTo({
                    url: 'description?val=' + takeVal
                });
            },
            chooseImg: function chooseImg() {
                var that = this;
                wx.chooseImage({
                    count: 3, // 默认9
                    sizeType: ['original', 'compressed'],
                    sourceType: ['album', 'camera'],
                    success: function success(res) {
                        that.isUpload = 8;
                        if (res.tempFilePaths.length > 0) {
                            wx.saveFile({
                                tempFilePath: res.tempFilePaths[0],
                                success: function success(res) {
                                    console.log(res);
                                    that.upPics = res.savedFilePath;
                                    console.log(that.upPics);
                                    that.uploaded = true;
                                    console.log(that.uploaded);
                                    that.$apply();
                                }
                            });
                        }
                        that.$apply();
                    }
                });
            },
            removeImg: function removeImg() {
                this.isUpload = -1;
                this.emmitImg = 0;
                this.upPics = "../resources/img/imgUpload.jpg";
                this.uploaded = false;
            },
            formSubmit: function formSubmit(e) {
                console.log(this.mType);
                if (!this.loginUId) {
                    wx.navigateTo({
                        url: 'login?fromPage=subPrice'
                    });
                    return;
                }
                if (e.detail.value.mName == '' || e.detail.value.mName == null) {
                    this.warningTip({
                        msg: '请输入品名！'
                    });
                    return;
                } else if ((e.detail.value.mBrandNum == '' || e.detail.value.mBrandNum == null) && this.mType != '辅料') {
                    this.warningTip({
                        msg: '请输入牌号！'
                    });
                    return;
                } else if (e.detail.value.mProducer == '' || e.detail.value.mProducer == null) {
                    this.warningTip({
                        msg: '请输入生产厂家！'
                    });
                    return;
                } else if (e.detail.value.mUnit != '面议' && (e.detail.value.mPrice == '' || e.detail.value.mPrice == null || isNaN(e.detail.value.mPrice))) {
                    this.warningTip({
                        msg: '价格错误！'
                    });
                    return;
                } else if (e.detail.value.mUnit == '面议' && e.detail.value.mPrice != "") {
                    this.warningTip({
                        msg: '面议的价格应为空！'
                    });
                    return;
                } else if (e.detail.value.seleCity == '' || e.detail.value.seleCity == null) {
                    this.warningTip({
                        msg: '请选择交货地！'
                    });
                    return;
                }
                if (this.mType == '辅料' && (e.detail.value.mModel == '' || e.detail.value.mModel == null)) {
                    this.warningTip({
                        msg: '请输入型号！'
                    });
                    return;
                }
                var that = this;
                if (this.edit == 5 && this.up != 9) {
                    console.log(this.edit);
                    if (this.isUpload == 8 && this.edit == 5) {
                        console.log(this.isUpload);
                        wx.getSavedFileList({
                            success: function success(res) {
                                console.log(res);
                                for (var i = 0; i < res.fileList.length - 1; i++) {
                                    for (var j = 0; j < res.fileList.length - 1 - i; j++) {
                                        if (res.fileList[j].createTime > res.fileList[j + 1].createTime) {
                                            var tem = res.fileList[j];
                                            res.fileList[j] = res.fileList[j + 1];
                                            res.fileList[j + 1] = tem;
                                        }
                                    }
                                }
                                if (res.fileList.length > 5) {
                                    wx.removeSavedFile({
                                        filePath: res.fileList[0].filePath,
                                        complete: function complete(res) {
                                            console.log(res);
                                        }
                                    });
                                }
                                if (that.isUpload == 8) {
                                    that.upPics = res.fileList[res.fileList.length - 1].filePath;
                                } else {
                                    that.upPics = "../resources/img/imgUpload.jpg";
                                }

                                that.$apply();
                            }
                        });
                        wx.uploadFile({
                            url: _config.api.product.editMaterialPrice.url, //仅为示例，非真实的接口地址
                            filePath: that.upPics,
                            name: 'pictures',
                            header: {
                                'content-type': 'multipart/form-data'
                            },
                            formData: {
                                'emptyImg': that.emmitImg,
                                'dailyBaseProductId': that.dailId,
                                'userId': that.loginUId,
                                'productType': that.mType == undefined ? '原料' : that.mType,
                                'commodityName': e.detail.value.mName == that.mName ? that.mName : "",
                                'definedCommodityName': e.detail.value.mName == that.mName ? "" : e.detail.value.mName,
                                'csName': e.detail.value.csName,
                                'productSign': e.detail.value.mBrandNum == undefined ? that.mBrandNum == undefined ? '' : that.mBrandNum : e.detail.value.mBrandNum,
                                'producer': e.detail.value.mProducer,
                                'deliveryPlace': e.detail.value.seleCity,
                                'deliveryType': that.deliveryWay == undefined ? '自提' : that.deliveryWay,
                                'containTaxFlag': that.taxRadioIndex,
                                'price': e.detail.value.mPrice == "" || e.detail.value.mPrice == null ? 0 : e.detail.value.mPrice,
                                'priceUnit': e.detail.value.mUnit,
                                'model': e.detail.value.mModel == undefined ? that.mModel == undefined ? '' : that.mModel : e.detail.value.mModel,
                                'remark': e.detail.value.pVal
                            },
                            success: function success(res) {

                                var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                                if (msg.isSuccess == 1) {
                                    wx.showToast({
                                        title: msg.errorMsg,
                                        icon: 'success'
                                    });
                                    wx.redirectTo({
                                        url: 'subPrice?redirect=my&picList=../resources/img/imgUpload.jpg'
                                    });
                                } else {
                                    that.warningTip({
                                        msg: msg.errorMsg
                                    });
                                }
                                that.$apply();
                            }
                        });
                    } else {
                        _wepy2.default.request({
                            url: _config.api.product.editMaterialPrice.url,
                            method: "POST",
                            header: {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            data: {
                                'emptyImg': that.emmitImg,
                                'dailyBaseProductId': that.dailId,
                                'userId': that.loginUId,
                                'productType': that.mType == undefined ? '原料' : that.mType,
                                'commodityName': e.detail.value.mName == that.mName ? that.mName : "",
                                'definedCommodityName': e.detail.value.mName == that.mName ? "" : e.detail.value.mName,
                                'csName': e.detail.value.csName,
                                'productSign': e.detail.value.mBrandNum == undefined ? that.mBrandNum == undefined ? '' : that.mBrandNum : e.detail.value.mBrandNum,
                                'producer': e.detail.value.mProducer,
                                'deliveryPlace': e.detail.value.seleCity,
                                'deliveryType': that.deliveryWay == undefined ? '自提' : that.deliveryWay,
                                'containTaxFlag': that.taxRadioIndex,
                                'price': e.detail.value.mPrice == "" || e.detail.value.mPrice == null ? 0 : e.detail.value.mPrice,
                                'priceUnit': e.detail.value.mUnit,
                                'model': e.detail.value.mModel == undefined ? that.mModel == undefined ? '' : that.mModel : e.detail.value.mModel,
                                'remark': e.detail.value.pVal
                            },
                            success: function success(res) {
                                console.log(res);
                                var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                                if (msg.isSuccess == 1) {
                                    wx.showToast({
                                        title: msg.errorMsg,
                                        icon: 'success'
                                    });
                                    wx.redirectTo({
                                        url: 'subPrice?redirect=my&picList=../resources/img/imgUpload.jpg'
                                    });
                                } else {
                                    that.warningTip({
                                        msg: msg.errorMsg
                                    });
                                }
                                that.$apply();
                            }
                        });
                    }
                }
                if (this.up == 9 && this.edit != 5) {
                    //复制后的提交
                    console.log(this.isUpload);
                    if (this.isUpload == 8) {
                        this.uploadPicFn(e);
                    } else {
                        _wepy2.default.request({
                            url: _config.api.product.releaseMaterialPrice.url,
                            method: "POST",
                            header: {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            data: {
                                'emptyImg': that.emmitImg,
                                'dailyBaseProductId': that.dailId,
                                'userId': that.loginUId,
                                'productType': that.mType == undefined ? '原料' : that.mType,
                                'commodityName': e.detail.value.mName == that.mName ? that.mName : "",
                                'definedCommodityName': e.detail.value.mName == that.mName ? "" : e.detail.value.mName,
                                'csName': e.detail.value.csName,
                                'productSign': e.detail.value.mBrandNum == undefined ? that.mBrandNum == undefined ? '' : that.mBrandNum : e.detail.value.mBrandNum,
                                'producer': e.detail.value.mProducer,
                                'deliveryPlace': e.detail.value.seleCity,
                                'deliveryType': that.deliveryWay == undefined ? '自提' : that.deliveryWay,
                                'containTaxFlag': that.taxRadioIndex,
                                'price': e.detail.value.mPrice == "" || e.detail.value.mPrice == null ? 0 : e.detail.value.mPrice,
                                'priceUnit': e.detail.value.mUnit,
                                'model': e.detail.value.mModel == undefined ? that.mModel == undefined ? '' : that.mModel : e.detail.value.mModel,
                                'remark': e.detail.value.pVal
                            },
                            success: function success(res) {
                                console.log(res);
                                var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                                if (msg.isSuccess == 1) {
                                    wx.showToast({
                                        title: msg.errorMsg,
                                        icon: 'success'
                                    });
                                    wx.redirectTo({
                                        url: 'subPrice?redirect=my&picList=../resources/img/imgUpload.jpg'
                                    });
                                } else {
                                    that.warningTip({
                                        msg: msg.errorMsg
                                    });
                                }
                                that.$apply();
                            }
                        });
                    }
                }
                if (this.up != 9 && this.edit != 5) {
                    console.log('normal');
                    console.log(this.isUpload);
                    if (this.isUpload == 8) {
                        this.uploadPicFn(e);
                    } else {
                        this.uploadParams(e);
                    }
                }
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(switchSubPrice, [{
        key: 'onLoad',
        value: function onLoad() {
            var confirmInfos = _wepy2.default.getStorageSync("antUserInfo");
            console.log(confirmInfos);
            this.mProducer = confirmInfos.companySimpleDesc == undefined ? confirmInfos.user.companySimpleDesc : confirmInfos.companySimpleDesc;
            this.getPnameDatas();
            this.fetchUnitsData();
        }
    }, {
        key: 'warningTip',
        value: function warningTip(obj) {
            this.opa = true;
            this.tip = obj.msg;
            this.$apply();
            var that = this;
            setTimeout(function () {
                that.opa = false;
                that.$apply();
            }, 800);
        }
    }, {
        key: 'getPnameDatas',
        value: function getPnameDatas() {
            var that = this;
            _wepy2.default.request({
                url: _config.api.product.getPnameDataList.url,
                method: _config.api.product.getPnameDataList.method,
                data: {
                    'industryRole': that.mType
                },
                success: function success(res) {
                    that.filterObj = res.data.body;
                    that.$apply();
                }
            });
        }
    }, {
        key: 'releaseStatus',
        value: function releaseStatus() {
            if (this.isConfirmSuccess) {
                wx.showModal({
                    title: '个人信息认证成功',
                    content: '您的信息已认证成功，发布的产品可以展示到线上咯',
                    showCancel: false,
                    confirmColor: '#128EFF',
                    success: function success(res) {
                        if (res.confirm) {
                            console.log('用户点击确定');
                        }
                    }
                });
            } else {
                wx.showModal({
                    title: '个人信息认证中',
                    content: '您的信息还在认证中，您可提前发布产品，待认证成功后即可线上展示',
                    showCancel: false,
                    confirmColor: '#128EFF',
                    success: function success(res) {
                        if (res.confirm) {
                            console.log('用户点击确定');
                        }
                    }
                });
            }
        }
    }, {
        key: 'fetchUnitsData',
        value: function fetchUnitsData() {
            //获取单位与交货方式
            var that = this;
            _wepy2.default.request({
                url: _config.api.product.fetchUnitsData.url,
                method: _config.api.product.fetchUnitsData.method,
                success: function success(res) {
                    console.log(res);
                    that.unit = res.data.body.priceUnit;
                    that.deliveryWays = res.data.body.deliveryType;
                    that.$apply();
                }
            });
        }
    }, {
        key: 'uploadParams',
        value: function uploadParams(e) {
            var that = this;
            console.log(e.detail.value.mBrandNum);
            _wepy2.default.request({
                url: _config.api.product.releaseMaterialPrice.url,
                method: "POST",
                header: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                data: {
                    'emptyImg': that.emmitImg,
                    //'dailyBaseProductId':that.dailId,
                    'userId': that.loginUId,
                    'productType': that.mType == undefined ? '原料' : that.mType,
                    'commodityName': e.detail.value.mName == that.mName ? that.mName : "",
                    'definedCommodityName': e.detail.value.mName == that.mName ? "" : e.detail.value.mName,
                    'csName': e.detail.value.csName,
                    'productSign': e.detail.value.mBrandNum == undefined ? that.mBrandNum == undefined ? '' : that.mBrandNum : e.detail.value.mBrandNum,
                    'producer': e.detail.value.mProducer,
                    'deliveryPlace': e.detail.value.seleCity,
                    'deliveryType': that.deliveryWay == undefined ? '自提' : that.deliveryWay,
                    'containTaxFlag': that.taxRadioIndex,
                    'price': e.detail.value.mPrice == "" || e.detail.value.mPrice == null ? 0 : e.detail.value.mPrice,
                    'priceUnit': e.detail.value.mUnit,
                    'model': e.detail.value.mModel == undefined ? that.mModel == undefined ? '' : that.mModel : e.detail.value.mModel,
                    'remark': e.detail.value.pVal
                },
                success: function success(res) {
                    console.log(res);
                    var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                    if (msg.isSuccess == 1) {
                        wx.showToast({
                            title: msg.errorMsg,
                            icon: 'success'
                        });
                        wx.redirectTo({
                            url: 'subPrice?redirect=my&picList=../resources/img/imgUpload.jpg'
                        });
                    } else {
                        that.warningTip({
                            msg: msg.errorMsg
                        });
                    }
                    that.$apply();
                }
            });
        }
    }, {
        key: 'uploadPicFn',
        value: function uploadPicFn(e) {
            var that = this;
            console.log(that.mType);
            wx.getSavedFileList({
                success: function success(res) {
                    for (var i = 0; i < res.fileList.length - 1; i++) {
                        for (var j = 0; j < res.fileList.length - 1 - i; j++) {
                            if (res.fileList[j].createTime > res.fileList[j + 1].createTime) {
                                var tem = res.fileList[j];
                                res.fileList[j] = res.fileList[j + 1];
                                res.fileList[j + 1] = tem;
                            }
                        }
                    }
                    if (res.fileList.length > 5) {
                        wx.removeSavedFile({
                            filePath: res.fileList[0].filePath,
                            complete: function complete(res) {
                                console.log(res);
                            }
                        });
                    }
                    if (that.isUpload == 8) {
                        that.upPics = res.fileList[res.fileList.length - 1].filePath;
                    } else {
                        that.upPics = "../resources/img/imgUpload.jpg";
                    }

                    that.$apply();
                }
            });
            console.log(that.upPics);
            _wepy2.default.uploadFile({
                url: _config.api.product.releaseMaterialPrice.url, //接口地址
                filePath: that.upPics,
                name: 'pictures',
                header: {
                    "content-type": "multipart/form-data"
                },
                formData: {
                    'emptyImg': that.emmitImg,
                    'userId': that.loginUId,
                    'productType': that.mType == undefined ? '原料' : that.mType,
                    'commodityName': e.detail.value.mName == that.mName ? that.mName : "",
                    'definedCommodityName': e.detail.value.mName == that.mName ? "" : e.detail.value.mName,
                    'csName': e.detail.value.csName,
                    'productSign': e.detail.value.mBrandNum == undefined ? that.mBrandNum == undefined ? '' : that.mBrandNum : e.detail.value.mBrandNum,
                    'producer': e.detail.value.mProducer,
                    'deliveryPlace': e.detail.value.seleCity,
                    'deliveryType': that.deliveryWay == undefined ? '自提' : that.deliveryWay,
                    'containTaxFlag': that.taxRadioIndex,
                    'price': e.detail.value.mPrice == "" || e.detail.value.mPrice == null ? 0 : e.detail.value.mPrice,
                    'priceUnit': e.detail.value.mUnit,
                    'model': e.detail.value.mModel == undefined ? that.mModel == undefined ? '' : that.mModel : e.detail.value.mModel,
                    'remark': e.detail.value.pVal
                },
                success: function success(res) {

                    var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                    if (msg.isSuccess == 0) {
                        that.warningTip({
                            msg: msg.errorMsg
                        });
                        return false;
                    }
                    if (msg.isSuccess == 1) {
                        wx.showToast({
                            title: msg.errorMsg,
                            icon: 'success'
                        });
                        wx.redirectTo({
                            url: 'subPrice?redirect=my&picList=../resources/img/imgUpload.jpg'
                        });
                    }
                    that.$apply();
                }
            });
        }
    }]);

    return switchSubPrice;
}(_wepy2.default.component);

exports.default = switchSubPrice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,