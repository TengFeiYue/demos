'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var personalInfo = function (_wepy$page) {
    _inherits(personalInfo, _wepy$page);

    function personalInfo() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, personalInfo);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = personalInfo.__proto__ || Object.getPrototypeOf(personalInfo)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
            'navigationBarTitleText': '个人信息',
            'navigationBarTextStyle': '#FFFFFF',
            'navigationBarBackgroundColor': '#0386FF'
        }, _this.components = {}, _this.data = {
            opa: false,
            tip: "",
            isUpload: -1,
            uploadImg: "../resources/img/layerCamera.jpg",
            changeNameCard: "../resources/img/layerCamera.jpg",
            loginUId: -1,
            hasJoin: 'noappliy',
            isJoin: "noappliy",
            hideBtn: true,
            hideLayer: false,
            hideOperateLayer: false,
            unPassedOperateLayer: false,
            verifyingOperateLayer: false,
            cardDuty: '',
            rejectReason: "",
            applyState: '前往认证',
            applyStateTip: '你的个人信息还未认证',
            statement: -1,
            UserCompanyId: -1,
            pName: '',
            cardPosition: '',
            pEmail: '',
            pCompanyName: '',
            pCompanybrief: '',
            companyType: '',
            runingWay: '',
            region: [],
            companyP: '',
            companyC: '',
            companyA: '',
            addressDetail: '',
            showSeachList: false,
            filteredName: [],
            nameIpt: false,
            otherIpt: false,
            getState: "",
            actionSheetHidden: true,
            actionSheetItems: [],
            confirming: "",
            static: true,
            isOldUser: false,
            isChange: false,
            pictureUrl: "",
            priseId: -1,
            saveFirst: false,
            blurVal: ""
        }, _this.methods = {
            filterMname: function filterMname(e) {
                //筛选企业名称
                if (e.detail.value.length == 0) {
                    this.showSeachList = false;
                } else {
                    this.showSeachList = true;
                }
                var that = this;
                _wepy2.default.request({
                    url: _config.api.common.getCompanyNameData.url,
                    method: _config.api.common.getCompanyNameData.method,
                    data: {
                        'searchKey': e.detail.value
                    },
                    success: function success(res) {
                        if (res.data.body) {
                            that.filteredName = res.data.body;
                        }
                        that.$apply();
                    }
                });
            },
            selectPname: function selectPname(e) {
                this.selectIndex = e.currentTarget.dataset.i;
                this.pCompanyName = e.currentTarget.dataset.v;
                this.showSeachList = false;
                var that = this;
                _wepy2.default.request({
                    url: _config.api.common.getCompanyNameData.url,
                    method: _config.api.common.getCompanyNameData.method,
                    data: {
                        'searchKey': that.pCompanyName
                    },
                    success: function success(res) {
                        console.log(res);
                        that.priseId = res.data.body[0].enterpriseId;
                        console.log(that.priseId);
                        if (that.priseId > 0) {
                            that.isChange = true;
                        } else if (that.priseId < 0 || that.priseId == "") {
                            that.isChange = false;
                        }
                        that.addressDetail = res.data.body[0].address;
                        that.runingWay = res.data.body[0].businessMode;
                        that.companyType = res.data.body[0].type;
                        that.companyP = res.data.body[0].provinceName;
                        that.companyC = res.data.body[0].cityName;
                        that.companyA = res.data.body[0].districtName;
                        that.pCompanybrief = res.data.body[0].name.slice(0, 5);
                        that.blurVal = that.pCompanyName;
                        that.$apply();
                    }
                });
            },
            bindRegionChange: function bindRegionChange(e) {
                this.region = e.detail.value;
                this.companyP = e.detail.value[0];
                this.companyC = e.detail.value[1];
                this.companyA = e.detail.value[2];
            },
            toConfirmInfo: function toConfirmInfo() {
                wx.redirectTo({
                    url: 'personInfoFill?nameCardUrl=' + this.pictureUrl + '&enterpriceId=' + this.priseId + '&saved=' + this.saveFirst
                });
                this.$apply();
            },
            changPositionInfo: function changPositionInfo() {
                this.hideLayer = true;
            },
            closeLayer: function closeLayer() {
                this.hideLayer = false;
                this.hideOperateLayer = false; //变更职位信息
                this.unPassedOperateLayer = false; //未通过
                this.verifyingOperateLayer = false; //审核中
            },
            showModel: function showModel() {
                var that = this;
                _wepy2.default.request({
                    url: _config.api.common.inqueryCardChange.url,
                    method: _config.api.common.inqueryCardChange.method,
                    data: {
                        'userId': that.loginUId
                    },
                    success: function success(res) {
                        that.statement = res.data.body.userCompanyApply.status;
                        that.UserCompanyId = res.data.body.userCompanyApply.id;
                        var status = res.data.body.userCompanyApply.status;
                        var position = res.data.body.userCompanyApply.position;
                        var imgUrl = res.data.body.userCompanyApply.nameCardPhoto;
                        var reject = res.data.body.userCompanyApply.rejectReason;
                        var records = res.data.body.userCompanyApply; //未申请职位变更
                        if (records == 0) {
                            status = 1;
                        }
                        switch (status) {
                            case 1:
                                that.hideLayer = false;
                                that.hideOperateLayer = true; //通过
                                break;
                            case 2:
                                that.hideLayer = false;
                                that.unPassedOperateLayer = true; //未通过
                                that.cardDuty = position;
                                that.changeNameCard = imgUrl;
                                that.rejectReason = reject;
                                break;
                            case 0:
                                that.hideLayer = false;
                                that.verifyingOperateLayer = true; //审核中
                                break;
                        }
                        that.$apply();
                    }
                });
            },
            getVal: function getVal(e) {
                this.cardDuty = e.detail.value;
            },
            upLoadCard: function upLoadCard() {
                var that = this;
                wx.chooseImage({
                    count: 1, // 默认9
                    sizeType: ['original', 'compressed'],
                    sourceType: ['album', 'camera'],
                    success: function success(res) {
                        that.isUpload = 8; //判断是否是上传的还是服务器返回的
                        that.changeNameCard = res.tempFilePaths[0];
                        if (res.tempFilePaths.length > 0) {
                            wx.saveFile({
                                tempFilePath: res.tempFilePaths[0],
                                success: function success(res) {
                                    that.changeNameCard = res.savedFilePath;
                                    that.$apply();
                                }
                            });
                        }
                        that.$apply();
                    }
                });
            },
            subChangedInfo: function subChangedInfo() {
                var that = this;
                var loginUId = this.loginUId;
                var changedDuty = this.cardDuty.trim();
                var uploadPic = this.changeNameCard;
                if (changedDuty == '' || changedDuty == null) {
                    this.warningTip({
                        msg: '职位不能为空！'
                    });
                    return;
                }
                if (uploadPic == '../resources/img/layerCamera.jpg') {
                    this.warningTip({
                        msg: '请选择名片！'
                    });
                    return;
                }
                wx.getSavedFileList({
                    success: function success(res) {
                        console.log(res);
                        for (var i = 0; i < res.fileList.length - 1; i++) {
                            for (var j = 0; j < res.fileList.length - 1 - i; j++) {
                                if (res.fileList[j].createTime > res.fileList[j + 1].createTime) {
                                    var tem = res.fileList[j];
                                    res.fileList[j] = res.fileList[j + 1];
                                    res.fileList[j + 1] = tem;
                                }
                            }
                        }
                        if (res.fileList.length > 5) {
                            wx.removeSavedFile({
                                filePath: res.fileList[0].filePath,
                                complete: function complete(res) {
                                    console.log(res);
                                }
                            });
                        }
                        that.changeNameCard = res.fileList[res.fileList.length - 1].filePath;
                        that.$apply();
                    }
                });
                console.log(this.statement);
                if (this.statement == 2) {
                    console.log(this.isUpload);
                    if (this.isUpload == 8 && this.statement == 2) {
                        //使用上传图片带参数
                        wx.uploadFile({
                            url: _config.api.common.subChangedDutyInfo.url, //仅为示例，非真实的接口地址
                            filePath: that.changeNameCard,
                            name: 'nameCardPhoto',
                            header: {
                                'content-type': 'multipart/form-data'
                            },
                            formData: {
                                'userId': loginUId,
                                'position': changedDuty
                            },
                            success: function success(res) {
                                console.log(that.changeNameCard);
                                console.log(res);
                                var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                                if (msg.isSuccess == 1) {
                                    wx.showToast({
                                        title: '提交成功!',
                                        icon: 'success'
                                    });
                                } else {
                                    that.warningTip({
                                        msg: msg.errorMsg
                                    });
                                }
                                that.hideLayer = false;
                                that.hideOperateLayer = false; //变更职位信息
                                that.unPassedOperateLayer = false; //未通过
                                that.verifyingOperateLayer = false;
                                that.$apply();
                            }
                        });
                    } else {
                        //使用request上传
                        _wepy2.default.request({
                            url: _config.api.common.subChangedDutyInfo.url,
                            method: 'POST',
                            header: {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            data: {
                                'userId': loginUId,
                                'position': changedDuty,
                                'userCompanyApplyId': that.UserCompanyId
                            },
                            success: function success(res) {
                                console.log(res.data);
                                var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                                if (msg.isSuccess == 1) {
                                    wx.showToast({
                                        title: '提交成功！',
                                        icon: 'success'
                                    });
                                } else {
                                    that.warningTip({
                                        msg: msg.errorMsg
                                    });
                                }
                                that.hideLayer = false;
                                that.hideOperateLayer = false; //变更职位信息
                                that.unPassedOperateLayer = false; //未通过
                                that.verifyingOperateLayer = false;
                                that.$apply();
                            }
                        });
                    }
                } else {
                    wx.uploadFile({
                        url: _config.api.common.subChangedDutyInfo.url, //仅为示例，非真实的接口地址
                        filePath: that.changeNameCard,
                        name: 'nameCardPhoto',
                        header: {
                            'content-type': 'multipart/form-data'
                        },
                        formData: {
                            'userId': loginUId,
                            'position': changedDuty
                        },
                        success: function success(res) {
                            var msg = typeof res.data == "string" ? JSON.parse(res.data) : res.data;
                            if (msg.isSuccess == 1) {
                                wx.showToast({
                                    title: '提交成功!',
                                    icon: 'success'
                                });
                            } else {
                                that.warningTip({
                                    msg: msg.errorMsg
                                });
                            }
                            that.hideLayer = false;
                            that.hideOperateLayer = false; //变更职位信息
                            that.unPassedOperateLayer = false; //未通过
                            that.verifyingOperateLayer = false;
                            that.$apply();
                        }
                    });
                }
            },
            blurEvent: function blurEvent(e) {
                this.blurVal = e.detail.value;
            },
            hideSearchList: function hideSearchList() {
                if (this.blurVal == "" || this.blurVal == null) this.blurVal = this.pCompanyName;
                console.log(this.blurVal);
                this.showSeachList = false;
                if (this.blurVal != this.pCompanyName) {
                    this.priseId = -1;
                } else {
                    this.priseId = 2;
                }
                if (this.priseId > 0) {
                    this.isChange = true;
                } else if (this.priseId < 0) {
                    this.isChange = false;
                }
                this.$apply();
            },
            listenerButton: function listenerButton() {
                this.actionSheetHidden = !this.actionSheetHidden;
            },
            listenerActionSheet: function listenerActionSheet() {
                this.actionSheetHidden = !this.actionSheetHidden;
            },
            selModel: function selModel(e) {
                //选择经营模式
                this.runingWay = e.currentTarget.dataset.v;
                this.actionSheetHidden = !this.actionSheetHidden;
            },
            toChooseModel: function toChooseModel() {
                //选择企业类型
                wx.navigateTo({
                    url: 'companyMode'
                });
            },
            formSubmit: function formSubmit(e) {
                console.log(this.loginUId);
                if (!this.loginUId) {
                    wx.navigateTo({
                        url: 'login?fromPage=personalInfo'
                    });
                    return;
                }
                var that = this;
                var cardInfos = e.detail.value;
                console.log(cardInfos);
                _wepy2.default.request({
                    url: _config.api.common.personalInfoData.url,
                    method: _config.api.common.personalInfoData.method,
                    header: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    data: {
                        'userId': that.loginUId,
                        'name': cardInfos.pName,
                        'position': cardInfos.cardPosition,
                        'email': cardInfos.pEmail,
                        'companyName': cardInfos.pCompanyName,
                        'companySimpleDesc': cardInfos.pCompanybrief,
                        'opeIndustry': cardInfos.companyType,
                        'businessMode': cardInfos.runingWay,
                        'province': cardInfos.companyP,
                        'city': cardInfos.companyC,
                        'area': cardInfos.companyA,
                        'address': cardInfos.addressDetail
                    },
                    success: function success(res) {
                        console.log(res);
                        that.saveFirst = true;
                        if (res.data.isSuccess == 1) {
                            wx.showToast({
                                title: res.data.errorMsg,
                                icon: 'success'
                            });
                            wx.setStorageSync('confirmInfos', {
                                'name': cardInfos.pName,
                                'position': cardInfos.cardPosition,
                                'email': cardInfos.pEmail,
                                'companyName': cardInfos.pCompanyName,
                                'companySimpleDesc': cardInfos.pCompanybrief,
                                'opeIndustry': cardInfos.companyType,
                                'businessMode': cardInfos.runingWay,
                                'province': cardInfos.companyP,
                                'city': cardInfos.companyC,
                                'area': cardInfos.companyA,
                                'address': cardInfos.addressDetail
                            });
                        } else {
                            that.warningTip({
                                msg: res.data.errorMsg
                            });
                        }
                        that.$apply();
                    }
                });
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(personalInfo, [{
        key: 'onShow',
        value: function onShow() {
            var pages = this.getCurrentPages();
            var currPage = pages[pages.length - 1]; //selectTypes
            var selectedType = currPage.data.seleType || [];
            var selectedArr = "";
            for (var i = 0; i < selectedType.length; i++) {
                selectedArr += selectedType[i] + ',';
            }
            this.companyType = selectedArr.substring(0, selectedArr.length - 1) == "" ? this.companyType : selectedArr.substring(0, selectedArr.length - 1);
        }
    }, {
        key: 'onLoad',
        value: function onLoad(e) {
            this.confirming = e.state;
            this.hideSearchList();
            this.fetchmodelData();
            var antsooUserInfo = _wepy2.default.getStorageSync("antUserInfo");
            console.log(antsooUserInfo);
            var oldUser = antsooUserInfo.user;
            var isNewUser = antsooUserInfo.newUser;
            this.loginUId = antsooUserInfo.userId;
            this.hasJoin = antsooUserInfo.joinFlag;
            this.confirmStatusquery();
            /*if(isNewUser=="0"||this.confirming=='confirm'){//判断是否为新用户
                this.pName=oldUser.name==null?"":oldUser.name;
                this.cardPosition=oldUser.position==null?"":oldUser.position;
                this.pEmail=oldUser.email==null?"":oldUser.email;
                this.pCompanyName=oldUser.companyName==null?"":oldUser.companyName;
                this.companyP=oldUser.city==null?"":oldUser.province;
                this.companyC=oldUser.city==null?"":oldUser.city;
                this.companyA=oldUser.city==null?"":oldUser.area;
                this.addressDetail=oldUser.address==null?"":oldUser.address;
                this.pCompanybrief=oldUser.companySimpleDesc==null?"":oldUser.companySimpleDesc;
                this.companyType=oldUser.opeIndustry==null?"":oldUser.opeIndustry;
                this.runingWay=oldUser.businessMode==null?"":oldUser.businessMode;
            }else{
                this.fetchPersonalInfoData();
            }*/
            this.fetchPersonalInfoData();
            this.$apply();
        }
    }, {
        key: 'warningTip',
        value: function warningTip(obj) {
            this.opa = true;
            this.tip = obj.msg;
            this.$apply();
            var that = this;
            setTimeout(function () {
                that.opa = false;
                that.$apply();
            }, 800);
        }
    }, {
        key: 'fetchPersonalInfoData',
        value: function fetchPersonalInfoData() {
            var that = this;
            _wepy2.default.request({
                url: _config.api.common.getPersonalInfoData.url,
                method: _config.api.common.getPersonalInfoData.method,
                data: {
                    'userId': that.loginUId
                },
                success: function success(res) {
                    var getPersonalInfoDatas = res.data.body;
                    console.log(res);
                    if (getPersonalInfoDatas.enterpriseId > 0) {
                        that.isChange = true;
                    }
                    that.pName = getPersonalInfoDatas.name;
                    that.cardPosition = getPersonalInfoDatas.position;
                    that.pEmail = getPersonalInfoDatas.email;
                    that.pCompanyName = getPersonalInfoDatas.companyName;
                    that.companyP = getPersonalInfoDatas.province;
                    that.companyC = getPersonalInfoDatas.city;
                    that.companyA = getPersonalInfoDatas.area;
                    that.addressDetail = getPersonalInfoDatas.address;
                    that.runingWay = getPersonalInfoDatas.businessMode;
                    that.companyType = getPersonalInfoDatas.opeIndustry;
                    that.pCompanybrief = getPersonalInfoDatas.companySimpleDesc;
                    that.pictureUrl = getPersonalInfoDatas.nameCardUrl;
                    that.$apply();
                }
            });
        }
    }, {
        key: 'confirmStatusquery',
        value: function confirmStatusquery() {
            var that = this;
            _wepy2.default.request({
                url: _config.api.common.confirmStatusquery.url,
                method: _config.api.common.confirmStatusquery.method,
                data: {
                    'userId': that.loginUId
                },
                success: function success(res) {
                    console.log(res);
                    if (res.data.isSuccess == 1) {
                        that.getState = res.data.body;
                        var getStatus = that.getState;
                        switch (getStatus) {
                            case 'noappliy':
                                that.isJoin = "noappliy";
                                break;
                            case 'unpassed':
                                that.isJoin = "unpassed";
                                break;
                            case 'applied':
                                that.isJoin = "applied";
                                break;
                            case 'passed':
                                that.isJoin = "passed";
                                break;
                        }
                        switch (that.isJoin) {
                            case 'noappliy':
                                that.applyState = "前往认证";
                                that.applyStateTip = "你的个人信息还未认证";
                                break;
                            case 'unpassed':
                                that.applyState = "重新提交";
                                that.applyStateTip = "您的个人信息存在错误，请修改后提交";
                                break;
                            case 'applied':
                                that.applyState = "";
                                that.hideBtn = false;
                                that.applyStateTip = "您的个人信息还在认证中";
                                that.nameIpt = true;
                                that.otherIpt = true;
                                break;
                            case 'passed':
                                that.applyState = "信息变更";
                                that.applyStateTip = "您的个人信息已认证通过";
                                that.nameIpt = true;
                                that.otherIpt = true;
                                break;
                        }
                    } else {
                        that.warningTip({
                            msg: res.data.errorMsg
                        });
                        return;
                    }
                    that.$apply();
                }
            });
        }
    }, {
        key: 'fetchmodelData',
        value: function fetchmodelData() {
            var that = this;
            _wepy2.default.request({
                url: _config.api.common.getmodelData.url,
                method: _config.api.common.getmodelData.method,
                success: function success(res) {
                    var runningWay = res.data.body.businessModeList;
                    var modelArr = [];
                    for (var i = 0; i < runningWay.length; i++) {
                        modelArr.push(runningWay[i].value);
                    }
                    that.actionSheetItems = modelArr;
                    that.$apply();
                }
            });
        }
    }, {
        key: 'hideSearchList',
        value: function hideSearchList() {
            if (this.blurVal == "" || this.blurVal == null) this.blurVal = this.pCompanyName;
            console.log(this.blurVal);
            this.showSeachList = false;
            if (this.blurVal != this.pCompanyName) {
                this.priseId = -1;
            } else {
                this.priseId = 2;
            }
            if (this.priseId > 0) {
                this.isChange = true;
            } else if (this.priseId < 0) {
                this.isChange = false;
            }
            this.$apply();
        }
    }]);

    return personalInfo;
}(_wepy2.default.page);

exports.default = personalInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,