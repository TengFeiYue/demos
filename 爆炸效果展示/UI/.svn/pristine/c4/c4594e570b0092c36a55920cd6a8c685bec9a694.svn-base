'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

var _dataNone = require('./../components/dataNone.js');

var _dataNone2 = _interopRequireDefault(_dataNone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var myCollect = function (_wepy$page) {
	_inherits(myCollect, _wepy$page);

	function myCollect() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, myCollect);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = myCollect.__proto__ || Object.getPrototypeOf(myCollect)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
			'navigationBarTitleText': '我的收藏',
			'navigationBarTextStyle': '#FFFFFF',
			'navigationBarBackgroundColor': '#0092FF'
		}, _this.components = {
			dataNone: _dataNone2.default
		}, _this.data = {
			loginUId: -1,
			person: [],
			scrollWrapHeight: 0,
			pageIndex: 1,
			loadmore: true
		}, _this.events = {}, _this.methods = {
			scrollLoading: function scrollLoading() {
				if (this.loadmore) {
					this.pageIndex++;
					if (this.pageIndex < 6) {
						this.getCollect();;
					} else {
						this.loadmore = false;
						wx.showModal({
							title: '',
							content: '更多内容请前往按搜app',
							showCancel: true,
							confirmText: '确定',
							confirmColor: '#0092ff',
							success: function success(res) {
								if (res.confirm) {
									if (wx.getSystemInfoSync().system.toLowerCase().indexOf('andr') != -1) {
										console.log('android');
										wx.navigateTo({
											url: 'downLoad'
										});
									} else {
										console.log('iso');
										wx.navigateTo({
											url: 'downLoad'
										});
									}
								} else if (res.cancel) {
									console.log('用户点击取消');
								}
							}
						});
					}
				} else {
					return false;
				}
			},
			toCompanyDetail: function toCompanyDetail(e) {
				var companyId = e.currentTarget.dataset.id;
				wx.navigateTo({
					url: 'comDetailInfo?companyId=' + companyId + '&userId=' + this.loginUId
				});
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(myCollect, [{
		key: 'onShow',
		value: function onShow() {
			_;
			this.pageIndex = 1;
		}
	}, {
		key: 'onLoad',
		value: function onLoad(option) {
			this.loginUId = option.userId;
			this.getCollect();
			this.scrollWrapHeight = wx.getSystemInfoSync().windowHeight;
		}
	}, {
		key: 'getCollect',
		value: function getCollect() {
			var that = this;
			var pageSize = 20;
			wx.request({
				url: _config.api.my.myCollect.url,
				method: _config.api.my.myCollect.method,
				data: {
					userId: that.loginUId,
					pageInfo2: {
						pIndex: that.pageIndex,
						pSize: pageSize
					}
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						var persons = res.data.body;
						if (persons != null) {
							var tpages = res.data.page.tCount;
							var pages = persons.length / 20;
							var isInt = tpages / (that.pageIndex * 20);
							that.loadmore = pages == 1 && isInt != 1 ? true : false;

							if (that.pageIndex > 1) {
								that.person = that.person.concat(persons);
							} else {
								that.person = persons;
							}
						}
						that.$apply();
						wx.hideLoading();
					}
				}
			});
		}
	}]);

	return myCollect;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(myCollect , 'pages/myCollect'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,