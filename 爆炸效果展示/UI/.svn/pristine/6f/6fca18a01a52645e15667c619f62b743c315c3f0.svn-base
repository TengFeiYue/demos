'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var comDetailInfo = function (_wepy$page) {
	_inherits(comDetailInfo, _wepy$page);

	function comDetailInfo() {
		var _ref;

		var _temp, _this2, _ret;

		_classCallCheck(this, comDetailInfo);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = comDetailInfo.__proto__ || Object.getPrototypeOf(comDetailInfo)).call.apply(_ref, [this].concat(args))), _this2), _this2.config = {
			'navigationBarTitleText': '俺搜·找客户-企业',
			'navigationBarTextStyle': '#FFFFFF',
			'navigationBarBackgroundColor': '#0092FF'
		}, _this2.data = {
			loginUId: -1,
			companyId: -1,
			showModal: false,
			animationData: {},
			contacts: [],
			info: {},
			num: -1,
			labels: [],
			previewImageList: [],
			qccInfo: [],
			qccList: [],
			qccPand: [],
			qccInst: [],
			qccTaxo: [],
			mainProductOne: '',
			collectFlag: -1,
			sh: 0,
			layInfo: {},
			layFlag: false,
			imgalist: [],
			qrId: -1 //点击三角时请求企业二维码的企业id
		}, _this2.methods = {
			closeLayer: function closeLayer() {
				this.layFlag = false;
			},
			previewImage: function previewImage(e) {
				wx.previewImage({
					urls: this.data.previewImageList // 需要预览的图片http链接列表
				});
			},
			productDetails: function productDetails() {
				var mainProduct = this.mainProductOne;
				var productId = this.info.companyId;
				var that = this;
				if (mainProduct != '' || this.info.mainProductList.length > 1) {
					wx.navigateTo({
						url: 'productDetails'
					});
					wx.setStorageSync("mainProduct", that.info.mainProductList);
				}
			},
			isCollect: function isCollect() {
				var _this = this;
				if (_this.collectFlag == 1) {
					//表示已经收藏过了，点击时取消收藏，调用取消收藏接口
					wx.request({
						method: 'POST',
						url: _config.api.company.cancelCollection.url,
						data: {
							userId: _this.loginUId,
							bizId: _this.companyId,
							type: 4
						},
						success: function success(res) {
							if (res.statusCode == 200) {
								wx.showToast({
									title: '收藏取消成功',
									icon: 'success',
									duration: 2000
								});
								if (res.data.isSuccess == 1) {
									_this.num = res.data.body;
								}
								_this.getCollect();
								_this.$apply();
							}
						}
					});
				} else {
					//表示未曾收藏过，点击时添加收藏，调用添加收藏接口
					wx.request({
						method: 'POST',
						url: _config.api.company.addCollection.url,
						data: {
							userId: _this.loginUId,
							bizId: _this.companyId,
							type: 4
						},
						success: function success(res) {
							if (res.statusCode == 200) {
								wx.showToast({
									title: '收藏已成功',
									icon: 'success',
									duration: 2000
								});
								if (res.data.isSuccess == 1) {
									_this.num = res.data.body;
								}
								_this.getCollect();
								_this.$apply();
							}
						}
					});
				}
			},
			toPersonDetail: function toPersonDetail(e) {
				if (!this.loginUId) {
					wx.navigateTo({
						url: 'login?fromPage=personDetail'
					});
					return;
				}
				var memberId = e.currentTarget.dataset.id;
				wx.navigateTo({
					url: 'connectionDetail?memberId=' + memberId + '&userId=' + this.loginUId
				});
			},

			showLay: function showLay() {
				var _this = this;
				_this.layFlag = true;
				_this.getQrCode();
			},
			previewQrCode: function previewQrCode() {
				var _this = this;
				_this.layFlag = false;
				wx.previewImage({
					urls: _this.data.imgalist
				});
			}
		}, _temp), _possibleConstructorReturn(_this2, _ret);
	}

	_createClass(comDetailInfo, [{
		key: 'onLoad',
		value: function onLoad(options) {
			var that = this;
			wx.getSystemInfo({
				success: function success(res) {
					that.sh = res.screenHeight;
				}
			});
			var scene = decodeURIComponent(options.scene);
			if (scene != 'undefined') {
				var optionUid = scene.split('&')[0].split('=')[1];
				var optionEntId = scene.split('&')[1].split('=')[1];
				this.loginUId = optionUid;
				this.companyId = optionEntId;
				this.getInfo();
				this.getContact();
			}
			this.loginUId = options.scene == undefined ? options.userId : optionUid;
			this.companyId = options.scene == undefined ? options.companyId : optionEntId;
			this.getInfo();
			this.getContact();
			this.getCollect();
		}
	}, {
		key: 'onUnload',
		value: function onUnload() {
			this.hideModal();
		}
	}, {
		key: 'showFun',
		value: function showFun() {
			if (this.contacts.length != 0) {
				var that = this;
				this.showModal = true;
				var animation = wx.createAnimation({
					duration: 300,
					timingFunction: "ease"
				});

				setTimeout(function () {
					animation.translateY(0).step();
					that.setData({
						animationData: animation.export()
					});
				}, 100);
			}
		}
	}, {
		key: 'hideModal',
		value: function hideModal() {
			this.showModal = false;
		}
	}, {
		key: 'getInfo',
		value: function getInfo() {
			var _this = this;
			_wepy2.default.request({
				method: _config.api.company.comDetailInfo.method,
				url: _config.api.company.comDetailInfo.url,
				data: {
					enterpriseId: _this.companyId,
					userId: _this.loginUId
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						_this.info = res.data.body;
						_this.num = res.data.body.favoriteQty;
						_this.qrId = _this.info.id;
						var label = _this.info.baseSecondCategory; // 企业标签

						if (label == null || label == '') {
							_this.labels = [];
						} else {
							_this.labels = label.split(',');
						}

						var mainProduct = res.data.body.mainProductList;

						if (mainProduct != null) {
							if (mainProduct.length > 0) {
								_this.mainProductOne = mainProduct[0];
							}
						}

						var previewImage = _this.info.enterpriseLogo; // 企业logo
						_this.previewImageList.push(previewImage);

						_this.$apply();
						_wepy2.default.request({
							url: _config.api.company.companyInformation.url,
							method: _config.api.company.companyInformation.method,
							data: {
								enterpriseName: _this.info.name
							},
							success: function success(ads) {
								if (ads.statusCode == 200) {
									var ads = ads.data.body;
									_this.qccInfo = ads.qccEnterpriseIndustryCommerceInfo; //工商信息
									_this.qccList = ads.qccEnterpriseInvestmentAbroadList; //对外投资
									_this.qccPand = ads.qccEnterprisePandect; //经营状况
									_this.qccTaxo = ads.qccEnterpriseTaxInfo; //财务总览
									_this.qccInst = ads.qccEnterpriseStockInfoList; //股东信息
									_this.$apply();
								}
							}
						});
					}
				}
			});
		}
	}, {
		key: 'getContact',
		value: function getContact() {
			var that = this;
			_wepy2.default.request({
				method: _config.api.company.companyContact.method,
				url: _config.api.company.companyContact.url,
				data: {
					userId: that.loginUId,
					enterpriseId: that.companyId
				},
				success: function success(res) {
					that.contacts = res.data.body.companyMemberList;
					that.$apply();
				}
			});
		}
	}, {
		key: 'getCollect',
		value: function getCollect() {
			var _this = this;
			wx.request({
				method: _config.api.company.isCollect.method,
				url: _config.api.company.isCollect.url,
				data: {
					userId: _this.loginUId,
					bizId: _this.companyId,
					type: 4
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						_this.collectFlag = res.data.body;
						_this.$apply();
					}
				}
			});
		}
	}, {
		key: 'getQrCode',
		value: function getQrCode() {
			var _this = this;
			wx.request({
				url: _config.api.my.myQrCode.url,
				method: _config.api.my.myQrCode.method,
				data: {
					userId: _this.loginUId,
					enterpriseId: _this.qrId
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						_this.layInfo = res.data.body;
						_this.imgalist[0] = _this.layInfo.enterpriseQrcode;
						_this.$apply();
					}
				}
			});
		}
	}]);

	return comDetailInfo;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(comDetailInfo , 'pages/comDetailInfo'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,