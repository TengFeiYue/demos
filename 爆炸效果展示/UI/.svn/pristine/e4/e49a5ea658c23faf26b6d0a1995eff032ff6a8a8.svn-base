'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _qqmapWxJssdk = require('./../utils/qqmap-wx-jssdk.js');

var _qqmapWxJssdk2 = _interopRequireDefault(_qqmapWxJssdk);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var roundPerson = function (_wepy$page) {
	_inherits(roundPerson, _wepy$page);

	function roundPerson() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, roundPerson);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = roundPerson.__proto__ || Object.getPrototypeOf(roundPerson)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
			'navigationBarTitleText': '周边的人',
			'navigationBarTextStyle': '#FFFFFF',
			'navigationBarBackgroundColor': '#0092FF'
		}, _this.data = {
			loginUId: -1,
			connectionList: [],
			pos: {
				longitude: 0, //经度
				latitude: 0 //纬度
			},
			nearBy: [],
			lastPos: '',
			scrollWrapHeight: 0,
			pageIndex: 1,
			loadmore: true,
			city: ''
		}, _this.events = {}, _this.methods = {
			scrollLoading: function scrollLoading() {
				if (this.loadmore) {
					this.pageIndex++;
					if (this.pageIndex < 6) {
						this.getRoundPerson();
					} else {
						this.loadmore = false;
						wx.showModal({
							title: '',
							content: '更多内容请前往按搜app',
							showCancel: true,
							confirmText: '确定',
							confirmColor: '#0092ff',
							success: function success(res) {
								if (res.confirm) {
									if (wx.getSystemInfoSync().system.toLowerCase().indexOf('andr') != -1) {
										console.log('android');
										wx.navigateTo({
											url: 'downLoad'
										});
									} else {
										console.log('iso');
										wx.navigateTo({
											url: 'downLoad'
										});
									}
								} else if (res.cancel) {
									console.log('用户点击取消');
								}
							}
						});
					}
				}
			},
			toPersonDetail: function toPersonDetail(e) {
				if (!this.loginUId) {
					wx.navigateTo({
						url: 'login?fromPage=personDetail'
					});
					return;
				}
				var memberId = e.currentTarget.dataset.id;
				wx.navigateTo({
					url: 'connectionDetail?memberId=' + memberId + '&userId=' + this.loginUId
				});
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(roundPerson, [{
		key: 'onLoad',
		value: function onLoad(e) {
			this.city = e.city;
			this.getLocation();
			this.scrollWrapHeight = wx.getSystemInfoSync().windowHeight;
		}
	}, {
		key: 'onShow',
		value: function onShow() {
			this.pageIndex = 1;
			var antsooUserInfo = _wepy2.default.getStorageSync("antUserInfo");
			this.loginUId = antsooUserInfo.userId;
		}
	}, {
		key: 'getLocation',
		value: function getLocation() {
			var that = this;
			var qqmapsdk = new _qqmapWxJssdk2.default({
				key: 'BFYBZ-FF73Q-FNK5G-GUK2J-5DUSO-6QBDJ' // 必填
			});
			wx.getLocation({
				type: 'wgs84',
				success: function success(res) {
					that.pos.latitude = res.latitude;
					that.pos.longitude = res.longitude;
					qqmapsdk.reverseGeocoder({
						location: {
							latitude: res.latitude,
							longitude: res.longitude
						},
						success: function success(addressRes) {
							that.nearBy = addressRes.result.address_component;
							//拼接需要的传参字符串
							that.lastPos = that.pos.longitude + ',' + that.pos.latitude + '|' + that.nearBy.province + '|' + that.nearBy.city + '|' + that.nearBy.district;
							that.getRoundPerson();
							that.$apply();
						}
					});
				},
				fail: function fail(res) {
					that.lastPos = that.pos.longitude + ',' + that.pos.latitude + '|' + '' + '|' + that.city + '|' + '';
					that.getRoundPerson();
					that.$apply();
				}
			});
		}
	}, {
		key: 'getRoundPerson',
		value: function getRoundPerson() {
			var that = this;
			var pageSize = 20;
			_wepy2.default.request({
				url: _config.api.index.roundPerson.url,
				method: _config.api.index.roundPerson.method,
				data: {
					firstCategory: "",
					job: "",
					distance: "10006",
					companyModel: "",
					pageInfo2: {
						pIndex: that.pageIndex,
						pSize: pageSize
					},
					userId: that.loginUId,
					position: that.lastPos
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						console.log(res);
						var connectionLists = res.data.body;
						var tpages = res.data.page.tCount;
						var pages = connectionLists.length / 20;
						var isInt = tpages / (that.pageIndex * 20);
						that.loadmore = pages == 1 && isInt != 1 ? true : false;

						if (that.pageIndex > 1) {
							that.connectionList = that.connectionList.concat(connectionLists);
						} else {
							that.connectionList = connectionLists;
						}

						that.$apply();
						wx.hideLoading();
						that.$apply();
					}
				}
			});
		}
	}]);

	return roundPerson;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(roundPerson , 'pages/roundPerson'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,