'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

var _location = require('./../utils/location.js');

var _location2 = _interopRequireDefault(_location);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var search = function (_wepy$component) {
	_inherits(search, _wepy$component);

	function search() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, search);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = search.__proto__ || Object.getPrototypeOf(search)).call.apply(_ref, [this].concat(args))), _this), _this.data = {
			viewShow: true,
			tabComAct: false,
			searchvalue: "",
			show_hide: true,
			testCom: [],
			testPer: [],
			seleCity: '',
			formPage: "",
			long: -1,
			lat: -1
		}, _this.events = {
			'selectCity': function selectCity(arg) {
				console.log(arg);
				this.seleCity = arg;
				// this.fromPage = arg.formP;
				wx.setStorageSync('getSeleCity', this.seleCity);
				this.fetchProductionStatisticData();
				this.fetchRelationsStatisticData();
			}
		}, _this.methods = {
			gotoEnterprise: function gotoEnterprise(e) {
				this.$emit('gotoEnterprise', {
					industryRole: e.currentTarget.dataset.industryrole,
					findex: e.currentTarget.dataset.findex
				});
			},
			gotoRelations: function gotoRelations(e) {
				this.$emit('gotoRelations', {
					industryRole: e.currentTarget.dataset.key
				});
			},
			toSearchCom: function toSearchCom() {
				wx.navigateTo({
					url: 'searchCom?long=' + this.long + '&lat=' + this.lat
				});
			},
			toSearchPer: function toSearchPer() {
				wx.navigateTo({
					url: 'searchPer'
				});
			},
			chooseCity: function chooseCity() {
				wx.navigateTo({
					url: 'cityposition'
				});
			},

			//选项卡切换
			changers: function changers(e) {
				if (this.data.newlife === e.target.dataset.current) {
					return false;
				} else {
					this.newlife = e.target.dataset.current;
					if (this.newlife == 0) {
						this.tabComAct = false;
						this.viewShow = true;
					} else {
						this.tabComAct = true;
						this.viewShow = false;
					}
				}
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(search, [{
		key: 'onLoad',
		value: function onLoad() {
			var that = this;
			_location2.default.getLocation().then(function (res) {
				console.log(res);
				that.seleCity = res.city;
				that.fetchProductionStatisticData();
				that.fetchRelationsStatisticData();
				that.$apply();
			});
		}
	}, {
		key: 'onShow',
		value: function onShow() {}
	}, {
		key: 'fetchProductionStatisticData',
		value: function fetchProductionStatisticData() {
			//获取产业链角色统计
			var that = this;
			_wepy2.default.request({
				url: _config.api.index.productionStatistic.url,
				method: _config.api.index.productionStatistic.method,
				data: {
					cityName: that.seleCity
				},
				success: function success(res) {
					that.testCom = res.data.body;
					that.$apply();
				}
			});
		}
	}, {
		key: 'fetchRelationsStatisticData',
		value: function fetchRelationsStatisticData() {
			//获取人脉统计
			var that = this;
			_wepy2.default.request({
				url: _config.api.index.relationsStatistic.url,
				method: _config.api.index.relationsStatistic.method,
				data: {
					cityName: that.seleCity
				},
				success: function success(res) {
					that.testPer = res.data.body;
					that.$apply();
				}
			});
		}
	}]);

	return search;
}(_wepy2.default.component);

exports.default = search;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,