'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var roundCompany = function (_wepy$page) {
	_inherits(roundCompany, _wepy$page);

	function roundCompany() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, roundCompany);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = roundCompany.__proto__ || Object.getPrototypeOf(roundCompany)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
			'navigationBarTitleText': '周边的企业',
			'navigationBarTextStyle': '#FFFFFF',
			'navigationBarBackgroundColor': '#0092FF'
		}, _this.components = {}, _this.data = {
			loginUId: -1,
			roundfirm: [],
			pos: {
				jin: 0,
				wei: 0
			},
			scrollWrapHeight: 0,
			pageIndex: 1,
			loadmore: true,
			city: ''
		}, _this.events = {}, _this.methods = {
			refush: function refush() {
				var that = this;
				wx.getLocation({
					type: 'wgs84',
					success: function success(res) {
						that.pos.wei = res.latitude;
						that.pos.jin = res.longitude;
						that.getRound();
					}
				});
			},
			scrollLoading: function scrollLoading() {
				if (this.loadmore) {
					// 新版本
					this.pageIndex++;
					if (this.pageIndex < 6) {
						this.getRound();
					} else {
						this.loadmore = false;
						wx.showModal({
							title: '',
							content: '更多内容请前往按搜app',
							showCancel: true,
							confirmText: '确定',
							confirmColor: '#0092ff',
							success: function success(res) {
								if (res.confirm) {
									if (wx.getSystemInfoSync().system.toLowerCase().indexOf('andr') != -1) {
										console.log('android');
										wx.navigateTo({
											url: 'downLoad'
										});
									} else {
										console.log('iso');
										wx.navigateTo({
											url: 'downLoad'
										});
									}
								} else if (res.cancel) {
									console.log('用户点击取消');
								}
							}
						});
					}
				}
			},
			toCompanyDetail: function toCompanyDetail(e) {
				if (!this.loginUId) {
					wx.navigateTo({
						url: 'login?fromPage=company'
					});
					return;
				}
				var memberId = e.currentTarget.dataset.id;
				wx.navigateTo({
					url: 'comDetailInfo?companyId=' + memberId + '&userId=' + this.loginUId
				});
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(roundCompany, [{
		key: 'onShow',
		value: function onShow() {
			this.pageIndex = 1;
		}
	}, {
		key: 'onLoad',
		value: function onLoad(e) {
			var antsooUserInfo = _wepy2.default.getStorageSync("antUserInfo");
			this.loginUId = antsooUserInfo.userId;
			this.city = e.city;
			var that = this;
			wx.getLocation({
				type: 'wgs84',
				success: function success(res) {
					that.pos.wei = res.latitude;
					that.pos.jin = res.longitude;
					that.getRound();
				},
				fail: function fail(err) {
					that.getRound();
				}
			});
			this.scrollWrapHeight = wx.getSystemInfoSync().windowHeight;
		}
	}, {
		key: 'getRound',
		value: function getRound() {
			//获取周边企业
			var that = this;
			var pageSize = 20;
			_wepy2.default.request({
				url: _config.api.index.roundCompany.url,
				method: _config.api.index.roundCompany.method,
				data: {
					baseFirstCategory: "原料",
					longitude: that.pos.jin,
					latitude: that.pos.wei,
					cityName: that.cityName,
					pageInfo2: {
						pIndex: that.pageIndex,
						pSize: pageSize
					}
				},
				success: function success(res) {
					if (res.statusCode == 200) {
						var roundfirmList = res.data.body;
						var tpages = res.data.page.tCount;
						var pages = roundfirmList.length / 20;
						var isInt = tpages / (that.pageIndex * 20);
						that.loadmore = pages == 1 && isInt != 1 ? true : false;
						if (that.pageIndex > 1) {
							that.roundfirm = that.roundfirm.concat(roundfirmList);
						} else {
							that.roundfirm = roundfirmList;
						}
						that.$apply();
						wx.hideLoading();
					}
				}
			});
		}
	}]);

	return roundCompany;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(roundCompany , 'pages/roundCompany'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,