'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _md = require('./../utils/md5.js');

var _md2 = _interopRequireDefault(_md);

var _config = require('./../config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var login = function (_wepy$page) {
    _inherits(login, _wepy$page);

    function login() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, login);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = login.__proto__ || Object.getPrototypeOf(login)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
            'navigationBarTitleText': '登录',
            'navigationBarTextStyle': '#FFFFFF',
            'navigationBarBackgroundColor': '#0386FF'
        }, _this.components = {}, _this.data = {
            loginType: false,
            second: -1, //秒
            username: '',
            validateCode: '',
            accountNumer: '',
            accountPwd: '',
            from: "",
            opa: false,
            tip: ""
        }, _this.methods = {
            usePwdLogin: function usePwdLogin() {
                this.loginType = true;
            },
            useMsgLogin: function useMsgLogin() {
                this.loginType = false;
            },
            msgLogin: function msgLogin() {
                //手机验证码登录
                if (this.username == '') {
                    this.warningTip({
                        msg: "请输入手机号！"
                    });
                    return;
                }
                if (this.validateCode == '') {
                    this.warningTip({
                        msg: "请输入验证码！"
                    });
                    return;
                }

                var that = this;
                _wepy2.default.request({
                    url: _config.api.user.login.url,
                    method: _config.api.user.login.method,
                    data: {
                        'username': that.username,
                        'svcode': that.validateCode
                    },
                    success: function success(data) {
                        if (data.data.isSuccess == 0) {
                            that.warningTip({
                                msg: data.data.errorMsg
                            });
                        } else {
                            wx.setStorageSync('antUserInfo', data.data.body);
                            if (that.from != "" || that.from != null) {
                                if (data.data.body.joinFlag == "noappliy") {
                                    wx.redirectTo({
                                        url: 'personInfoFill'
                                    });
                                    return;
                                } else if (data.data.body.joinFlag == "unpassed" || data.data.body.joinFlag == "applied" || data.data.body.joinFlag == undefined) {
                                    wx.redirectTo({
                                        url: 'personalInfo?fromPage=login'
                                    });
                                    return;
                                } else if (data.data.body.joinFlag == "passed") {
                                    wx.redirectTo({
                                        url: 'subPrice?pUnit=元/吨&deliverway=自提&picList=../resources/img/imgUpload.jpg'
                                    });
                                    return;
                                }
                                /*if(that.from=="propaganda"){//有宣传页来的
                                  console.log(data.data.body)
                                    wx.redirectTo({
                                         url: 'propaganda?redirect=login&userId='+that.loginUId
                                     })
                                     return;
                                }*/
                            }
                            wx.navigateBack({
                                delta: 1
                            });
                            return;
                        }
                        that.$apply();
                    }
                });
            },
            bindUserNameInput: function bindUserNameInput(e) {
                //输入手机号
                this.username = e.detail.value;
            },
            bindCodeInput: function bindCodeInput(e) {
                //输入短信验证码
                this.validateCode = e.detail.value;
            },
            userNumber: function userNumber(e) {
                //输入账号
                this.accountNumer = e.detail.value;
            },
            userPwd: function userPwd(e) {
                //输入密码
                this.accountPwd = e.detail.value;
            },
            sendValidateCode: function sendValidateCode() {
                var _this2 = this;

                if (this.username == '') {
                    this.warningTip({
                        msg: "请输入手机号"
                    });
                    return;
                }
                var regString = '^((13[0-9])|(15[0-9])|(18[0-9])|(17[0-9])|(147))\\d{8}$';
                var reg = new RegExp(regString);
                if (!reg.test(this.username)) {
                    this.warningTip({
                        msg: "手机号格式错误"
                    });
                    return;
                }
                this.second = 60;
                var interval = setInterval(function () {
                    _this2.second--;
                    _this2.$apply();
                    if (_this2.second <= -1) {
                        clearInterval(interval);
                    }
                }, 1000);
                var that = this;
                _wepy2.default.request({
                    url: _config.api.user.validateCode.url,
                    method: _config.api.user.validateCode.method,
                    data: {
                        'username': that.username
                    },
                    success: function success(res) {
                        console.log(res);
                    }
                });
            },
            pwdLogin: function pwdLogin() {
                //密码登录
                if (this.accountNumer == '') {
                    this.warningTip({
                        msg: "请输入手机号！"
                    });
                    return;
                }
                if (this.accountPwd == '') {
                    this.warningTip({
                        msg: "请输入密码！"
                    });
                    return;
                } else {
                    this.accountPwd = _md2.default.hexMD5(this.accountPwd);
                    console.log(this.accountPwd);
                }
                var regString = '^((13[0-9])|(15[0-9])|(18[0-9])|(17[0-9])|(147))\\d{8}$';
                var reg = new RegExp(regString);
                if (!reg.test(this.accountNumer)) {
                    this.warningTip({
                        msg: "手机号格式错误"
                    });
                    return;
                }
                var that = this;
                _wepy2.default.request({
                    url: _config.api.user.pwdLogin.url,
                    method: _config.api.user.pwdLogin.method,
                    data: {
                        'username': that.accountNumer,
                        'password': that.accountPwd
                    },
                    success: function success(data) {
                        console.log(data);
                        if (data.data.isSuccess == 0) {
                            that.warningTip({
                                msg: data.data.errorMsg
                            });
                        } else {
                            wx.setStorageSync('antUserInfo', data.data.body);
                            if (that.from != "" || that.from != null) {
                                if (data.data.body.joinFlag == "noappliy") {
                                    wx.redirectTo({
                                        url: 'personInfoFill'
                                    });
                                    return;
                                } else if (data.data.body.joinFlag == "unpassed" || data.data.body.joinFlag == "applied" || data.data.body.joinFlag == undefined) {
                                    wx.redirectTo({
                                        url: 'personalInfo?fromPage=login'
                                    });
                                    return;
                                } else if (data.data.body.joinFlag == "passed") {
                                    wx.redirectTo({
                                        url: 'subPrice?pUnit=元/吨&deliverway=自提&picList=../resources/img/imgUpload.jpg'
                                    });
                                    return;
                                }
                            }
                            wx.navigateBack({
                                delta: 1
                            });
                            return;
                        }
                        that.$apply();
                    }
                });
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(login, [{
        key: 'onShow',
        value: function onShow() {
            console.log('login页面显示');
        }
    }, {
        key: 'onLoad',
        value: function onLoad(e) {
            this.from = e.fromPage;
        }
    }, {
        key: 'warningTip',
        value: function warningTip(obj) {
            this.opa = true;
            this.tip = obj.msg;
            this.$apply();
            var that = this;
            setTimeout(function () {
                that.opa = false;
                that.$apply();
            }, 800);
        }
    }]);

    return login;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(login , 'pages/login'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,