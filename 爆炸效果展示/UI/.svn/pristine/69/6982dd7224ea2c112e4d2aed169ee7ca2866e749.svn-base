'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _config = require('./../config.js');

var _city = require('./../utils/city.js');

var _city2 = _interopRequireDefault(_city);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cityposition = function (_wepy$page) {
    _inherits(cityposition, _wepy$page);

    function cityposition() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, cityposition);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = cityposition.__proto__ || Object.getPrototypeOf(cityposition)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
            'navigationBarTitleText': '城市选择',
            'navigationBarTextStyle': '#FFFFFF',
            'navigationBarBackgroundColor': '#0386FF'
        }, _this.data = {
            searchLetter: [],
            showLetter: "",
            winHeight: 0,
            // tHeight: 0,
            // bHeight: 0,
            cityList: [],
            isShowLetter: false,
            scrollTop: 0, //置顶高度
            scrollTopId: '', //置顶id
            city: "全国",
            hotcityList: [{ cityCode: 110000, city: '北京市' }, { cityCode: 310000, city: '上海市' }, { cityCode: 440100, city: '广州市' }, { cityCode: 440300, city: '深圳市' }, { cityCode: 330100, city: '杭州市' }, { cityCode: 320100, city: '南京市' }, { cityCode: 420100, city: '武汉市' }, { cityCode: 410100, city: '郑州市' }, { cityCode: 120000, city: '天津市' }, { cityCode: 610100, city: '西安市' }, { cityCode: 510100, city: '成都市' }, { cityCode: 500000, city: '重庆市' }]
        }, _this.methods = {
            bindScroll: function bindScroll() {},
            clickLetter: function clickLetter(e) {
                console.log(e.currentTarget.dataset.letter);
                var showLetter = e.currentTarget.dataset.letter;

                this.showLetter = showLetter;
                this.isShowLetter = true;
                this.scrollTopId = showLetter;
                var that = this;
                setTimeout(function () {
                    that.isShowLetter = false;
                    that.$apply();
                }, 1000);
            },
            //默认选择城市
            defaultBindCity: function defaultBindCity() {
                //  this.city=e.currentTarget.dataset.city
                var pages = this.getCurrentPages();
                var currPage = pages[pages.length - 1]; //当前页面
                var prevPage = pages[pages.length - 2]; //上一个页面
                prevPage.setData({
                    seleCity: '全国'
                });
                wx.navigateBack();
            },
            //选择城市
            bindCity: function bindCity(e) {
                this.city = e.currentTarget.dataset.city;
                var pages = this.getCurrentPages();
                var currPage = pages[pages.length - 1]; //当前页面
                var prevPage = pages[pages.length - 2]; //上一个页面
                //prevPage.data.seleCity=this.city;
                prevPage.setData({
                    seleCity: e.currentTarget.dataset.city
                });
                wx.navigateBack();
            },
            //选择热门城市
            bindHotCity: function bindHotCity(e) {
                //   this.city=e.currentTarget.dataset.city
                var pages = this.getCurrentPages();
                var currPage = pages[pages.length - 1]; //当前页面
                var prevPage = pages[pages.length - 2]; //上一个页面
                //prevPage.data.seleCity=this.city;
                prevPage.setData({
                    //  seleCity: this.city
                    seleCity: e.currentTarget.dataset.city
                });
                wx.navigateBack();
            },
            //点击热门城市回到顶部
            hotCity: function hotCity() {
                this.scrollTop = 0;
            }

        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(cityposition, [{
        key: 'onLoad',
        value: function onLoad() {
            // 生命周期函数--监听页面加载
            console.log(this.city);
            this.city = "全国";
            var searchLetter = _city2.default.searchLetter;
            var cityList = _city2.default.cityList();
            var sysInfo = wx.getSystemInfoSync();
            var winHeight = sysInfo.windowHeight;
            var itemH = winHeight / searchLetter.length;
            var tempObj = [];
            for (var i = 0; i < searchLetter.length; i++) {
                var temp = {};
                temp.name = searchLetter[i];
                temp.tHeight = i * itemH;
                temp.bHeight = (i + 1) * itemH;
                tempObj.push(temp);
            }
            this.winHeight = winHeight;
            this.itemH = itemH;
            this.searchLetter = tempObj;
            this.cityList = cityList;
        }
    }, {
        key: 'onReady',
        value: function onReady() {}
    }]);

    return cityposition;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(cityposition , 'pages/cityposition'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,